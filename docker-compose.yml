# Este archivo define los servicios que Docker va a gestionar.
# En este caso, solo tenemos un servicio: la base de datos MySQL.

version: '3.8' # Especifica la versión de la sintaxis de Docker Compose.

services:
  # Nombre del servicio de la base de datos
  db:
    image: mysql:8.0 # Usa la imagen oficial de MySQL versión 8.0.
    container_name: mysql_db_reservas # Nombre del contenedor para fácil identificación.
    restart: always # Reinicia el contenedor automáticamente si se detiene.
    environment:
      # Variables de entorno para la configuración de MySQL.
      # ¡IMPORTANTE! Usa contraseñas más seguras en un entorno de producción.
      MYSQL_ROOT_PASSWORD: rootpassword # Contraseña para el usuario root de MySQL.
      MYSQL_DATABASE: reservas_db # Nombre de la base de datos que se creará.
      MYSQL_USER: user # Nombre del usuario que se creará.
      MYSQL_PASSWORD: password # Contraseña para el nuevo usuario.
    ports:
      # Mapea el puerto 3306 del contenedor al puerto 3306 de tu máquina local.
      # Esto permite que nuestra API de Node.js se conecte a la base de datos.
      - "3306:3306"
    volumes:
      # Monta un volumen para persistir los datos de MySQL.
      # Los datos se guardarán en una carpeta 'mysql-data' en tu máquina local.
      - mysql-data:/var/lib/mysql
      # Monta el script de inicialización.
      # Docker ejecutará los archivos .sql que encuentre en esta carpeta
      # la primera vez que se cree el contenedor.
      - ./backend/db:/docker-entrypoint-initdb.d
    healthcheck:
      # Comprobación de salud para asegurar que la base de datos esté lista antes de que otras aplicaciones intenten conectarse.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define el volumen nombrado que usamos arriba para persistir los datos.
volumes:
  mysql-data: